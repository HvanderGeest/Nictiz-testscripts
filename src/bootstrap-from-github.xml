<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="bootstrapFromGithub" default="build">
    <!-- 
        ANT build script to start the build from the lib cache or, if that doesn't exist yet, load the build file from
        Github and download thetools. It is assumed that this is a Nictiz repo and that the main target is called
        "build".
        The following parameters need to be present:
        * tool.reponame - The name of the repository
        * tool.name     - Basically the relevant folder name within the repository
        * tool.version  - The version of the tool (as understood by git, so any tag, release, branch or commit will do)
        * tool.antfile  - The name of the antfile to include
    -->
    <property name="tool.localdir" value=""/>

    <!-- Relative paths turn out to be a nightmare to get right, so lets convert it to an absolute path -->
    <property name="tool.localdir.abs" location="${tool.localdir}"/>

    <!-- Tell the main build script where to find common asserts and place the build scripts -->
    <property name="lib.dir" location="${basedir}/lib"/>

    <!-- Construct the path to the test scripts, either the locally defined dir or a new dir under "lib" -->
    <property name="testscripttools.repo.dir" location="${lib.dir}/${tool.reponame}/${tool.version}"/>
    <condition property="testscripttools.dir" value="${tool.localdir.abs}" else="${testscripttools.repo.dir}">
        <length string="${tool.localdir}" trim="true" when="greater" length="0"/>
    </condition>
    
    <!-- Include the main buildscript from the testscript repo (or the locally defined version) -->
    <include as="main" file="${testscripttools.dir}/ant/${tool.antfile}.xml" optional="true"/>

    <!-- If we couldn't load the main build script, load it directly from Github. -->
    <condition property="repo.url" value="https://raw.githubusercontent.com/Nictiz/${tool.reponame}/${tool.version}/${tool.name}/ant/${tool.antfile}.xml" else="file://"> <!-- Set to something nonsensical if the condition is not met, so include won't crash -->
        <not>
            <isset property="xslt.dir"/>
        </not>
    </condition>
    <include as="main" optional="true">
        <url url="${repo.url}"/>
    </include>

    <!-- Check if we need to download the testscript tools repo from Github, which is needed if we don't have it
         already and if we didn't specify to use a local copy (we never download anything when using a local copy so we
         cannot accidentally override it). -->
    <target name="checkForRepoDownload">
        <condition property="download.repo">
            <and>
                <length string="${tool.localdir}" trim="true" when="equal" length="0"/>
                <not>
                    <available file="${testscripttools.dir}"/>
                </not>               
            </and>
        </condition>
    </target>
    
    <!-- Download and extract the Nictiz testscript tools from Github if we don't have them already --> 
    <target name="get.toolrepo" depends="checkForRepoDownload" if="download.repo">
        <sequential>
            <echo>Downloading the testscript tools repo from Github</echo>
            <echo>If you want to use a local copy for debugging, specifiy it with the -Dtestscripttools.local=... parameter</echo>
            <echo/>
            <mkdir dir="${testscripttools.dir}/"/>
            <local name="zip.name"/>
            <property name="zip.name" value="${testscripttools.dir}/package.zip"/>
            <get src="https://github.com/Nictiz/${tool.reponame}/archive/${tool.version}.zip"
                dest="${zip.name}"/>
            <unzip src="${zip.name}" dest="${testscripttools.dir}" failOnEmptyArchive="true">
                <patternset>
                    <include name="*/${tool.name}/**"/>
                </patternset>
                <mapper type="regexp" from="^.*?/${tool.name}/(.*)" to="\1"/>
            </unzip>
            <delete file="${zip.name}"/>
            <property name="hastestscripttools" value="true" />
        </sequential>
    </target>
    
    <!-- Call the build script from the tooling repo -->
    <extension-point name="build" depends="get.toolrepo, main.build"/>
        
</project>
