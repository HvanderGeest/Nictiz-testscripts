<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir http://hl7.org/fhir/STU3/fhir-all.xsd" xmlns="http://hl7.org/fhir">
    <id value="medmij-pdfa-fhir3-0-2-xis-2-5-serve-2-binary-xml"/>
    <url value="http://nictiz.nl/fhir/fhir3-0-2/TestScript/medmij-pdfa-fhir3-0-2-xis-2-5-serve-pdfa-xml"/>
    <name value="Nictiz MedMij PDFA - XIS Server - Scenario 2.5 - Serve PDFA from a non-FHIR endpoint - XML"/>
    <status value="active"/>
    <date value="2020-08-13"/>
    <publisher value="Nictiz"/>
    <contact>
        <name value="Nictiz"/>
        <telecom>
            <system value="email"/>
            <value value="kwalificatie@nictiz.nl"/>
            <use value="work"/>
        </telecom>
    </contact>
    <description value="Scenario 2.5 - Read PDF/A from a non-FHIR endpoint - Serve PDFA file of person 2 based on earlier fetched DocumentReference resource."/>
    <copyright value="Â© Nictiz 2020"/>
    <fixture id="patient-token-fixture">
        <resource>
            <reference value="../_reference/resources/medmij-pdfa-fhir3-0-2-Patient-Token-kwalificatie2.xml"/>
        </resource>
    </fixture>
    <profile id="Bundle-profile">
        <reference value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
    </profile>
    <variable>
        <name value="patient-token-id"/>
        <expression value="Patient.id"/>
        <sourceId value="patient-token-fixture"/>
    </variable>
    <variable>
        <name value="pdfa-url"/>
        <!-- Pick the absolute url as is or create an absolute url when a relative url is given by combining the base URL given in the Bundle self link with the relative reference.-->
        <expression value="iif(Bundle.entry.select(resource as DocumentReference).where(type.coding.where(code ='68626-1')).content[0].attachment.url.startsWith('Binary/'),
            Bundle.link.url.replaceMatches('DocumentReference[/?].*$','') + Bundle.entry.select(resource as DocumentReference).where(type.coding.where(code ='68626-1')).content[0].attachment.url,
            Bundle.entry.select(resource as DocumentReference).where(type.coding.where(code ='68626-1')).content[0].attachment.url)"/>
        <sourceId value="documentreference-search-response"/>
    </variable>
    <variable>
        <name value="token-XXX-Schulte"/>
        <defaultValue value="Bearer aae7b5aa-d796-4fba-b4d3-852d9043ee66"/>
        <!--<defaultValue value="${patient-token-id}"/>-->
        <description value="OAuth Token for patient XXX_Schulte"/>
    </variable>
    <test id="01-ServeDocumentReference">
        <name value="01-ServeDocumentReference"/>
        <description value="Test XIS Server query search operation for known DocumentReference of person 2. The expected response code is 200(OK) and content is a searchset Bundle resource containing 1 DocumentReference resource in XML format. Either scenario 1.4 + 2.4 or 2.5 need to be supported for succesfull qualification. "/>
        <action>
            <operation>
                <type>
                    <system value="http://hl7.org/fhir/testscript-operation-codes"/>
                    <code value="search"/>
                </type>
                <resource value="DocumentReference"/>
                <description value="XIS Server query search operation for known DocumentReference."/>
                <accept value="xml"/>
                <contentType value="none"/>
                <params value="?status=current"/>
                <requestHeader>
                    <field value="Authorization"/>
                    <value value="${token-XXX-Schulte}"/>
                </requestHeader>
                <responseId value="documentreference-search-response"/>
            </operation>
        </action>
        <action>
            <assert>
                <description value="Confirm that the operation was succesful"/>
                <operator value="in"/>
                <responseCode value="200,201"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned resource type is Bundle."/>
                <direction value="response"/>
                <resource value="Bundle"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned Bundle type is searchset."/>
                <direction value="response"/>
                <expression value="Bundle.type"/>
                <operator value="equals"/>
                <value value="searchset"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
                <direction value="response"/>
                <expression value="Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned Bundle contains a self link."/>
                <direction value="response"/>
                <expression value="Bundle.link.relation.exists() and Bundle.link.relation = 'self' and Bundle.link.url.exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
                <direction value="response"/>
                <expression value="Bundle.descendants().select(identifier.where(system.toString() = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty())).count() = 0"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
                <direction value="response"/>
                <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that all returned resources except OperationOutcome contain a meta.profile tag."/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(meta.profile.empty()).empty()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
                <direction value="response"/>
                <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
                <direction value="response"/>
                <expression value="Bundle.entry.all($this.fullUrl.endsWith($this.resource.id) or $this.fullUrl.startsWith('urn:'))"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
                <direction value="response"/>
                <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that literal References (Reference.reference) are an absolute URL, a relative URL or an internal fragment reference (contained), see: http://hl7.org/fhir/stu3/references.html#literal."/>
                <direction value="response"/>
                <expression value="Bundle.descendants().reference.all( startsWith('http://') or startsWith('https://') or startsWith('#') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or (startsWith('urn:').not() and startsWith('#').not() and matches('^[A-Za-z]{3,}/[^/]+$')) )"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2019.01_FHIR_IG#Use_of_the_reference_datatype."/>
                <direction value="response"/>
                <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists())"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that all CodeableConcept elements contain a coding.display or a text value if no Coding exists, see https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2019.01_FHIR_IG#Use_of_coded_concepts."/>
                <direction value="response"/>
                <expression value="Bundle.descendants().where($this.is(CodeableConcept)).all( coding.display.exists() or (coding.exists().not() and text.exists()))"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
                <direction value="response"/>
                <validateProfileId value="Bundle-profile"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned searchset Bundle contains 1 entry."/>
                <direction value="response"/>
                <expression value="Bundle.entry.count() = 1"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned Bundle contains a DocumentReference with a specific LOINC code."/>
                <direction value="response"/>
                <expression value="Bundle.entry.select(resource as DocumentReference).where(type.coding.where(code ='68626-1')).exists()"/>
            </assert>
        </action>
    </test>
    <test id="02-ServePDFA">
        <name value="02-ServePDFA"/>
        <description value="Test XIS Server read operation for known PDFA document of person 2. The location of the PDF/A document is obtained from a fullURL reference in the DocumentReference.content.attachment.url. The expected response code is 200(OK) and content contains a PDF/A document."/>
        <action>
            <operation>
                <type>
                    <system value="http://hl7.org/fhir/testscript-operation-codes"/>
                    <code value="read"/>
                </type>
                <resource value="DocumentReference"/>
                <description value="XIS Server read operation for a document on a known location, using the fullURL."/>
                <accept value="xml"/>
                <contentType value="none"/>
                <requestHeader>
                    <field value="Authorization"/>
                    <value value="${token-XXX-Schulte}"/>
                </requestHeader>
                <url value="${pdfa-url}"/>
            </operation>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned HTTP status is 200(OK)."/>
                <direction value="response"/>
                <responseCode value="200"/>
            </assert>
        </action>
    </test>
    <test id="03-TestServerReferenceControl">
        <name value="03-TestServerReferenceControl"/>
        <description value="Test XIS Server to have control over the reference obtained from the DocumentReference.content.attachment.url. This test resolves the fullURL withouth an authorization header. The request should fail to confirm that the XIS has control over the context. The expected response code is not 200(OK) but should be 401, 403 or 404. Either scenario 1.4 + 2.4 or 2.5 need to be supported for succesfull qualification. "/>
        <action>
            <operation>
                <type>
                    <system value="http://hl7.org/fhir/testscript-operation-codes"/>
                    <code value="read"/>
                </type>
                <resource value="DocumentReference"/>
                <description value="XIS Server read operation for a document on a known location, using the fullURL."/>
                <accept value="xml"/>
                <contentType value="none"/>
                <url value="${pdfa-url}"/>
            </operation>
        </action>
        <action>
            <assert>
                <description value="Confirm that the returned HTTP status is 200(OK)."/>
                <direction value="response"/>
                <operator value="notEquals"/>
                <responseCode value="200"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Check if the returned HTTP status is 401(Unauthorized), 403(Forbidden) or 404(Not Found). Assert is set to warning only becasue other HTTP failure codes may be expected as well."/>
                <direction value="response"/>
                <operator value="in"/>
                <responseCode value="401,403,404"/>
                <warningOnly value="true"/>
            </assert>
        </action>
    </test>
</TestScript>

